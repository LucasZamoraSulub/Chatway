// src/services/genericAreaService.ts
import fs from "fs";
import path from "path";
import aiServices from "~/services/aiServices";
import { config } from "../config";
import { ConversationManager } from "~/services/conversationManager";
import { AreaConfigService } from "~/services/areaConfigService";
import { AreaConfig } from "~/config/areas.config";

export class GenericAreaService {
  /**
   * Procesa la entrada del usuario para el flujo gen√©rico de √°rea:
   * - Actualiza el historial de la conversaci√≥n.
   * - Prepara el contexto para la IA.
   * - Carga el prompt especializado y obtiene la respuesta.
   * - Registra la interacci√≥n y actualiza el historial.
   *
   * @param userInput Mensaje del usuario.
   * @param selectedFlow √Årea seleccionada.
   * @param ctx Contexto del flujo.
   * @param state Estado del flujo.
   * @returns La respuesta generada por la IA.
   */
  static async processUserInput(
    userInput: string,
    selectedFlow: string,
    ctx: any,
    state: any
  ): Promise<string> {
    console.log(`üì• Procesando consulta en ${selectedFlow}: ${userInput}`);

    // Obtener o inicializar el historial de conversaci√≥n
    const history: { role: string; content: string }[] = await state.get("conversationHistory") || [];
    
    // Agregar el mensaje del usuario y registrar la interacci√≥n
    history.push({ role: "user", content: userInput });
    await ConversationManager.logInteraction(ctx, state, "user", userInput);
    await state.update({ conversationHistory: history });

    // Preparar el contexto para la IA (por ejemplo, usar los √∫ltimos 7 mensajes)
    const startIndex = history.length > 7 ? history.length - 7 : 0;
    const contextMessages = history.slice(startIndex);
    console.log("ü§ñ Contexto enviado a IA:", contextMessages);

    // Obtener la configuraci√≥n del √°rea utilizando el service centralizado
    let areaConfig: AreaConfig;
    try {
      areaConfig = AreaConfigService.getAreaConfig(selectedFlow);
    } catch (error: any) {
      console.error(error.message);
      throw new Error("√Årea no reconocida");
    }

    // Cargar el prompt especializado
    const promptPath = path.join(
      process.cwd(),
      "assets/Prompts/areas",
      areaConfig.conversation.promptFile
    );
    const promptContent = fs.readFileSync(promptPath, "utf8");

    // Instanciar la IA y obtener la respuesta usando el prompt y el contexto
    const AI = new aiServices(config.ApiKey);
    let response = await AI.chat(promptContent, contextMessages);
    if (!response || response.includes("No encontr√© informaci√≥n")) {
      response = areaConfig.conversation.fallbackResponse ||
        "‚ùå No se encontr√≥ informaci√≥n exacta. ¬øPodr√≠as darme m√°s detalles?";
    }
    console.log(`ü§ñ Respuesta de IA para ${selectedFlow}: ${response}`);

    // Registrar la respuesta de la IA y actualizar el historial
    history.push({ role: "assistant", content: response });
    await ConversationManager.logInteraction(ctx, state, "assistant", response);
    await state.update({ conversationHistory: history });

    return response;
  }
}
