import { addKeyword, EVENTS } from "@builderbot/bot";
import { mainMenuFlow } from "./mainMenuFlow";
import { intermediaryFlow } from "./intermediaryFlow";
import { genericAgentFlow } from "./liveAgents/genericAgentFlow";
import { areasConfig, AreaConfig } from "~/config/areas.config";

const selectServiceModeFlow = addKeyword(EVENTS.ACTION)
  .addAction(async (ctx, ctxFn) => {
    // Obtener el √°rea seleccionada del estado
    const selectedFlow: string = await ctxFn.state.get("selectedFlow");

    // Buscar la configuraci√≥n del √°rea en areasConfig
    const config: AreaConfig | undefined = areasConfig.find(
      (area) => area.area === selectedFlow
    );

    // Validaci√≥n: Si no hay un √°rea seleccionada o no existe la configuraci√≥n, redirige al men√∫ principal
    if (!selectedFlow) {
      console.log(`‚ö†Ô∏è No se encontr√≥ un √°rea v√°lida para ${ctx.from}.`);
      return ctxFn.gotoFlow(mainMenuFlow);
    }
    if (!config) {
      console.log(`‚ö†Ô∏è No se encontr√≥ configuraci√≥n para el √°rea ${selectedFlow}.`);
      return ctxFn.gotoFlow(mainMenuFlow);
    }

    // Enviar mensaje de bienvenida din√°mico (incluye el tiempo de espera) para el √°rea
    const areaMessage = config.welcomeMessage(config.waitingTime);
    await ctxFn.flowDynamic(areaMessage);

    // Enviar mensaje aparte con las opciones de modalidad
    const optionsMessage =
      "\n1Ô∏è‚É£ *Seguir con mi ayuda y obtener informaci√≥n ahora mismo.* ü§ñ\n" +
      "2Ô∏è‚É£ *Hablar con un asesor y esperar su respuesta.* üë®";
    await ctxFn.flowDynamic(optionsMessage);
  })
  .addAction({ capture: true }, async (ctx, ctxFn) => {
    const userChoice = ctx.body.toLowerCase().trim();
    const selectedFlow: string = await ctxFn.state.get("selectedFlow");

    // Validar que el √°rea seleccionada existe
    if (!selectedFlow) {
      console.log(`‚ö†Ô∏è No se encontr√≥ un √°rea v√°lida para ${ctx.from}.`);
      return ctxFn.gotoFlow(mainMenuFlow);
    }
    const config: AreaConfig | undefined = areasConfig.find(
      (area) => area.area === selectedFlow
    );
    if (!config) {
      console.log(`‚ö†Ô∏è No se encontr√≥ configuraci√≥n para el √°rea ${selectedFlow}.`);
      return ctxFn.gotoFlow(mainMenuFlow);
    }

    // Opci√≥n Bot: redirige a intermediaryFlow (atenci√≥n v√≠a bot)
    if (userChoice.includes("1") || userChoice.includes("bot")) {
      console.log(`ü§ñ Usuario ${ctx.from} opt√≥ por atenci√≥n v√≠a bot en ${selectedFlow}.`);
      return ctxFn.gotoFlow(intermediaryFlow);
    }

    // Opci√≥n Agente: redirige al flujo configurado para atenci√≥n en vivo en funci√≥n del √°rea
    if (userChoice.includes("2") || userChoice.includes("agente")) {
      console.log(`üìû Usuario ${ctx.from} opt√≥ por ser atendido por un agente en ${selectedFlow}.`);
      return ctxFn.gotoFlow(genericAgentFlow);
    }

    console.log(`‚ö†Ô∏è Usuario ${ctx.from} ingres√≥ una opci√≥n no v√°lida.`);
    return ctxFn.fallBack(
      "‚ùå Opci√≥n no v√°lida. Por favor, responde con *1Ô∏è‚É£ Por el bot* o *2Ô∏è‚É£ Por un agente*."
    );
  });

export { selectServiceModeFlow };
